from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from aiogram.enums import ParseMode

from app.database import *
from app.keyboards import *

from aiogram.filters.logic import or_f

router = Router()

class AnswerStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_cat = State()
    waiting_for_cat_another = State()
    waiting_for_char = State()
    waiting_for_dur = State()
    waiting_for_since = State()
    waiting_for_till = State()
    waiting_for_exp = State()
    waiting_for_desc = State()
    waiting_for_cur = State()
    waiting_for_sal = State()
    waiting_for_del = State()
    waiting_for_goal = State()

class VacancyState(StatesGroup):
    descriptions = State()  # –°–ª–æ–≤–∞—Ä—å {message_id: –æ–ø–∏—Å–∞–Ω–∏–µ}

@router.message(Command('start'))
async def cmd_menu(message: Message, state: FSMContext):
    await message.answer('üëã')
    await message.answer('–ü—Ä–∏–≤—ñ—Ç! –¶–µ Gigsy, –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–æ—à—É–∫—É —Ç–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —Ä–æ–±–æ—Ç–∏ –Ω–∞ –ø–∞—Ä—Ç-—Ç–∞–π–º (–ø—ñ–¥—Ä–æ–±—ñ—Ç–æ–∫). \n\n'
                         '–¢—É—Ç –≤—Å–µ –ø—Ä–æ—Å—Ç–æ —Ç–∞ —à–≤–∏–¥–∫–æ, –¥–∞–≤–∞–π —Ä–æ–∑–±–µ—Ä–µ–º–æ—Å—å –Ω–∞ –ø—Ä–∞–∫—Ç–∏—Ü—ñ!', reply_markup=s_menu_kb)
    await message.answer('–ü–µ—Ä—à–∏–π –∫—Ä–æ–∫. –û–±–µ—Ä–∏ —Å–≤–æ—é –º–µ—Ç—É', reply_markup=emp_srch_kb)
    await create_analytics_db()
    await state.set_state(AnswerStates.waiting_for_goal)

@router.callback_query(F.data.in_({"emp", "srch"}))
async def cmd_emp_srch(callback: CallbackQuery):

    #await callback.message.answer(str(count))

    if callback.data == 'emp':
        count = await select_analytics_db("emp")
        await update_analytics_db("emp", int(count+1))
        await callback.message.answer('–°—É–ø–µ—Ä! –î–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –≤–∞–∫–∞–Ω—Å—ñ—ó –æ–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç "üíº –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –≤–∞–∫–∞–Ω—Å—ñ—é" –≤ –º–µ–Ω—é')
    if callback.data == 'srch':
        count = await select_analytics_db("srch")
        await update_analytics_db("srch", int(count+1))
        await callback.message.answer('–°—É–ø–µ—Ä! –î–ª—è –ø–æ—à—É–∫—É –≤–∞–∫–∞–Ω—Å—ñ–π –æ–±–µ—Ä–∏ –ø—É–Ω–∫—Ç "üîé –®—É–∫–∞—Ç–∏ —Ä–æ–±–æ—Ç—É" –≤ –º–µ–Ω—é')

@router.message(F.text == "45345")
async def cmd_an(message: Message):
    emp_count = await select_analytics_db("emp")
    srch_count = await select_analytics_db("srch")
    emp_to_vac_count = await select_analytics_db("emp_to_vac")
    srch_to_filt_count = await select_analytics_db("srch_to_filt")
    emp_to_publ_count = await select_analytics_db("emp_to_publ")
    srch_to_fav_count = await select_analytics_db("srch_to_fav")
    await message.answer(f"–†–æ–±–æ—Ç–æ–¥–∞–≤—Ü—ñ: {emp_count} \n"
                         f"–®—É–∫–∞—á—ñ: {srch_count} \n\n"
                         f"–†–æ–±–æ—Ç–æ–¥–∞–≤—Ü—ñ, —â–æ –ø–æ—á–∞–ª–∏ –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –≤–∞–∫–∞–Ω—Å—ñ—é: {emp_to_vac_count} \n"
                         f"–®—É–∫–∞—á—ñ, —â–æ –ø–æ—á–∞–ª–∏ —à—É–∫–∞—Ç–∏: {srch_to_filt_count} \n"
                         f"–†–æ–±–æ—Ç–æ–¥–∞–≤—Ü—ñ, —â–æ –æ–ø—É–±–ª—ñ–∫—É–≤–∞–ª–∏ –≤–∞–∫–∞–Ω—Å—ñ—é: {emp_to_publ_count} \n"
                         f"–®—É–∫–∞—á—ñ, —â–æ –∑–±–µ—Ä–µ–≥–ª–∏ –≤–∞–∫–∞–Ω—Å—ñ—é: {srch_to_fav_count}")

@router.message(F.text == "–®–£–ö–ê–¢–ò")
async def send_filters(message: Message):
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ Telegram
    filters = await get_user_filters(user_id)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î

    if filters:
        salary = 0
        viewed = 0
        await rec_alg(viewed, user_id)

        while True:
            row = await send_rec(user_id)
            if row is None:
                await message.answer("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
                break

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–∞–Ω–Ω—ã–µ –∏–∑ row
            await message.answer(f"<b>{row['–ù–∞–∑–≤–∞']}</b> \n\n"
                                 f"<b>üíµ –ó–∞—Ä–æ–±—ñ—Ç–Ω–∞ –ø–ª–∞—Ç–∞:</b> {row['–ó–ü']}\n\n"
                                 f"<b>üë®‚Äçüíª –•–∞—Ä–∞–∫—Ç–µ—Ä —Ä–æ–±–æ—Ç–∏:</b> {row['–•–∞—Ä–∞–∫—Ç–µ—Ä']} \n"
                                 f"<b>üïê –ì—Ä–∞—Ñ—ñ–∫:</b> {row['–ó']} –¥–æ {row['–î–æ']} \n"
                                 f"<b>üìù –û–ø–∏—Å: </b>{row['–û–ø–∏—Å'][:100]}",
                                 parse_mode="HTML", reply_markup=vac_kb("–†–æ–∑–≥–æ—Ä–Ω—É—Ç–∏ üîΩ", "ü§ç"))
    else:
        await message.answer("‚ùå –§–∏–ª—å—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

@router.callback_query(F.data.in_({"vac_fav", "vac_exp"}))
async def fav_toggle(callback: CallbackQuery):
    fav_state = callback.message.reply_markup.inline_keyboard[1][0].text
    exp_state = callback.message.reply_markup.inline_keyboard[0][0].text

    fav_text = fav_state  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Å—Ç–∞—ë—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º
    exp_text = exp_state  # –¢–æ –∂–µ —Å–∞–º–æ–µ
    new_text = callback.message.text  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—Å—Ç –æ—Å—Ç–∞—ë—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º

    row = await find_desc(callback.from_user.id, callback.message.text.split("üìù –û–ø–∏—Å: ")[1]) if "üìù –û–ø–∏—Å: " in callback.message.text else None

    if callback.data == "vac_fav":
        count = await select_analytics_db("srch_to_fav")
        await update_analytics_db("srch_to_fav", int(count + 1))
        fav_text = "‚ù§Ô∏è" if fav_state == "ü§ç" else "ü§ç"
        await add_to_fav(callback.from_user.id, row)

    if callback.data == "vac_exp":
        exp_text = "–ó–≥–æ—Ä–Ω—É—Ç–∏ üîº" if exp_state == "–†–æ–∑–≥–æ—Ä–Ω—É—Ç–∏ üîΩ" else "–†–æ–∑–≥–æ—Ä–Ω—É—Ç–∏ üîΩ"

        if row:
            if exp_state == "–†–æ–∑–≥–æ—Ä–Ω—É—Ç–∏ üîΩ":
                new_text = (
                    f"<b>{row['–ù–∞–∑–≤–∞']}</b> \n\n"
                    f"<b>üíµ –ó–∞—Ä–æ–±—ñ—Ç–Ω–∞ –ø–ª–∞—Ç–∞:</b> {row['–ó–ü']}\n\n"
                    f"<b>‚öôÔ∏è –ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</b> {row['–ö–∞—Ç–µ–≥–æ—Ä—ñ—è']} \n"
                    f"<b>üë®‚Äçüíª –•–∞—Ä–∞–∫—Ç–µ—Ä —Ä–æ–±–æ—Ç–∏:</b> {row['–•–∞—Ä–∞–∫—Ç–µ—Ä']} \n"
                    f"<b>üìÖ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å:</b> {row['–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å']} \n"
                    f"<b>üïê –ì—Ä–∞—Ñ—ñ–∫:</b> {row['–ó']} –¥–æ {row['–î–æ']} \n"
                    f"<b>üíº –†—ñ–≤–µ–Ω—å –¥–æ—Å–≤—ñ–¥—É:</b> {row['–†—ñ–≤–µ–Ω—å']} \n\n"
                    f"<b>üìù –û–ø–∏—Å: </b>{row['–û–ø–∏—Å']}"
                )
            else:
                new_text = (
                    f"<b>{row['–ù–∞–∑–≤–∞']}</b> \n\n"
                    f"<b>üíµ –ó–∞—Ä–æ–±—ñ—Ç–Ω–∞ –ø–ª–∞—Ç–∞:</b> {row['–ó–ü']}\n\n"
                    f"<b>üë®‚Äçüíª –•–∞—Ä–∞–∫—Ç–µ—Ä —Ä–æ–±–æ—Ç–∏:</b> {row['–•–∞—Ä–∞–∫—Ç–µ—Ä']} \n"
                    f"<b>üïê –ì—Ä–∞—Ñ—ñ–∫:</b> {row['–ó']} –¥–æ {row['–î–æ']} \n\n"
                    f"<b>üìù –û–ø–∏—Å: </b>{row['–û–ø–∏—Å'][:100]}"
                )

    # **–û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—Å–µ–≥–¥–∞**, –¥–∞–∂–µ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è —Ç–æ–ª—å–∫–æ "ü§ç"
    await callback.message.edit_text(new_text, parse_mode="HTML", reply_markup=vac_kb(exp_text, fav_text))

    await callback.answer()

    # message_text = callback.message.text

@router.message(or_f(F.text == "‚ù§Ô∏è –ó–±–µ—Ä–µ–∂–µ–Ω—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó", Command("fav")))
async def cmd_send_favs(message: Message):
    max_attempts = 5
    attempts = 0

    while attempts < max_attempts:
        # viewed = 0
            row = await send_fav(message.from_user.id)
            print(row)
            if row is None:
                await reset_viewed(message.from_user.id)
                await message.answer("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
                break

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–∞–Ω–Ω—ã–µ –∏–∑ row
            await message.answer(f"<b>{row['–ù–∞–∑–≤–∞']}</b> \n\n"
                                          f"<b>üë®‚Äçüíª –•–∞—Ä–∞–∫—Ç–µ—Ä —Ä–æ–±–æ—Ç–∏:</b> {row['–•–∞—Ä–∞–∫—Ç–µ—Ä']} \n"
                                          f"<b>üïê –ì—Ä–∞—Ñ—ñ–∫:</b> {row['–ó']} –¥–æ {row['–î–æ']} \n"
                                          f"<b>üìù –û–ø–∏—Å: </b>{row['–û–ø–∏—Å'][:100]}",
                                          parse_mode="HTML", reply_markup=vac_kb("–†–æ–∑–≥–æ—Ä–Ω—É—Ç–∏ üîΩ", "ü§ç"))
    else:
        await message.answer("‚ùå –§–∏–ª—å—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

# Adding of new vacancy by employer
@router.message(or_f(F.text == "üíº –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –≤–∞–∫–∞–Ω—Å—ñ—é", Command("vac")))
async def cmd_vac_db(message: Message, state: FSMContext):
    #analytics
    count = await select_analytics_db("emp_to_vac")
    await update_analytics_db("emp_to_vac", int(count + 1))

    await create_vac_db()
    await insert_id(message.from_user.id)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∞–∫–∞–Ω—Å—ñ—ó:")
    await state.set_state(AnswerStates.waiting_for_name)

@router.message(AnswerStates.waiting_for_name)
async def cmd_collect_name(message: Message, state: FSMContext):
    await update_vacancy("–ù–∞–∑–≤–∞", message.from_user.id, message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=e_cat_kb)
    await state.set_state(AnswerStates.waiting_for_cat)

@router.callback_query(F.data.in_({"hr", "it", "fin", "bukh"}))
async def cmd_cat(callback: CallbackQuery, state: FSMContext):
    if callback.data == 'hr':
        await update_vacancy("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", callback.from_user.id, '–ì–æ—Ç–µ–ª—å–Ω–æ-—Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–∏–π –±—ñ–∑–Ω–µ—Å')
    if callback.data == 'it':
        await update_vacancy("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", callback.from_user.id, 'IT')
    if callback.data == 'fin':
        await update_vacancy("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", callback.from_user.id, '–§—ñ–Ω–∞–Ω—Å–∏, –±–∞–Ω–∫')
    if callback.data == 'bukh':
        await update_vacancy("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", callback.from_user.id, '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä—ñ—è, –∞—É–¥–∏—Ç')
    await callback.message.answer("–Ø–∫–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä —Ä–æ–±–æ—Ç–∏?", reply_markup=e_char_kb)
    await state.set_state(AnswerStates.waiting_for_char)

@router.callback_query(F.data == "cat_an")
async def cmd_cat_another(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–∞—à –≤–∞—Ä—ñ–∞–Ω—Ç:")
    await state.set_state(AnswerStates.waiting_for_cat_another)

@router.message(AnswerStates.waiting_for_cat_another)
async def cmd_cat_another_text(message: Message, state: FSMContext):
    await update_vacancy("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", message.from_user.id, message.text)
    await message.answer("–Ø–∫–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä —Ä–æ–±–æ—Ç–∏?", reply_markup=e_char_kb)
    await state.set_state(AnswerStates.waiting_for_char)

@router.callback_query(F.data.in_({"on", "of"}))
async def cmd_char(callback: CallbackQuery, state: FSMContext):
    if callback.data == 'on':
        await update_vacancy("–•–∞—Ä–∞–∫—Ç–µ—Ä", callback.from_user.id, "–û–Ω–ª–∞–π–Ω")
    if callback.data == 'of':
        await update_vacancy("–•–∞—Ä–∞–∫—Ç–µ—Ä", callback.from_user.id, "–û—Ñ–ª–∞–π–Ω")
    await callback.message.answer("–Ø–∫–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ä–æ–±–æ—Ç–∏?", reply_markup=e_dur_kb)
    await state.set_state(AnswerStates.waiting_for_dur)

@router.callback_query(F.data.in_({"one_time", "1-3", "3-6", ">6"}))
async def cmd_dur(callback: CallbackQuery, state: FSMContext):
    if callback.data == 'one_time':
        await update_vacancy("–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å", callback.from_user.id, '–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞/–ø—Ä–æ–µ–∫—Ç–Ω–∞ —Ä–æ–±–æ—Ç–∞')
    if callback.data == '1-3':
        await update_vacancy("–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å", callback.from_user.id, '1-3 –º—ñ—Å—è—Ü—ñ')
    if callback.data == '3-6':
        await update_vacancy("–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å", callback.from_user.id, '3-6 –º—ñ—Å—è—Ü—ñ–≤')
    if callback.data == '>6':
        await update_vacancy("–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å", callback.from_user.id, '>6 –º—ñ—Å—è—Ü—ñ–≤')
    await callback.message.answer("–ó —è–∫–æ–≥–æ —á–∞—Å—É?")
    await state.set_state(AnswerStates.waiting_for_since)

@router.message(AnswerStates.waiting_for_since)
async def cmd_since(message: Message, state: FSMContext):
    await update_vacancy("–ó", message.from_user.id, message.text)
    await message.answer("–î–æ —è–∫–æ–≥–æ —á–∞—Å—É?")
    await state.set_state(AnswerStates.waiting_for_till)

@router.message(AnswerStates.waiting_for_till)
async def cmd_till(message: Message, state: FSMContext):
    await update_vacancy("–î–æ", message.from_user.id, message.text)
    await message.answer("–†—ñ–≤–µ–Ω—å –¥–æ—Å–≤—ñ–¥—É", reply_markup=e_exp_kb)
    await state.set_state(AnswerStates.waiting_for_exp)

@router.callback_query(F.data.in_({"no_exp", "less_6", "more_6", "more_1"}))
async def cmd_exp(callback: CallbackQuery, state: FSMContext):
    if callback.data == 'no_exp':
        await update_vacancy("–†—ñ–≤–µ–Ω—å", callback.from_user.id, '–ë–µ–∑ –¥–æ—Å–≤—ñ–¥—É')
    if callback.data == 'less_6':
        await update_vacancy("–†—ñ–≤–µ–Ω—å", callback.from_user.id, '–º–µ–Ω—à–µ 6 –º—ñ—Å—è—Ü—ñ–≤')
    if callback.data == 'more_6':
        await update_vacancy("–†—ñ–≤–µ–Ω—å", callback.from_user.id, '–±—ñ–ª—å—à–µ 6 –º—ñ—Å—è—Ü—ñ–≤')
    if callback.data == 'more_1':
        await update_vacancy("–†—ñ–≤–µ–Ω—å", callback.from_user.id, '–±—ñ–ª—å—à–µ 1 —Ä–æ–∫—É')
    await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É –¥–ª—è –≤–∫–∞–∑–∞–Ω–Ω—è –∑–∞—Ä–æ–±—ñ—Ç–Ω–æ—ó –ø–ª–∞—Ç–∏", reply_markup=e_sal_kb)
    await state.set_state(AnswerStates.waiting_for_cur)

@router.callback_query(F.data.in_({"usd", "uah"}))
async def cmd_cur(callback: CallbackQuery, state: FSMContext):
    if callback.data == 'uah':
        await update_vacancy("–í–∞–ª—é—Ç–∞", callback.from_user.id, 'UAH')
    if callback.data == 'usd':
        await update_vacancy("–í–∞–ª—é—Ç–∞", callback.from_user.id, 'USD')
    await callback.message.answer("–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –∑–∞—Ä–æ–±—ñ—Ç–Ω–æ—ó –ø–ª–∞—Ç–∏ —á–∏—Å–ª–æ–º –±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤")
    await state.set_state(AnswerStates.waiting_for_sal)

@router.message(AnswerStates.waiting_for_sal)
async def cmd_sal(message: Message, state: FSMContext):
    await update_vacancy("–ó–ü", message.from_user.id, message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –≤–∞–∫–∞–Ω—Å—ñ—ó –Ω–µ –º–µ–Ω—à–µ, –Ω—ñ–∂ –Ω–∞ 100 —Å–∏–º–≤–æ–ª—ñ–≤")
    await state.set_state(AnswerStates.waiting_for_desc)

@router.message(AnswerStates.waiting_for_desc)
async def cmd_desc(message: Message, state: FSMContext):
    if len(message.text) < 100:
        await message.answer("‚ùå –û–ø–∏—Å –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π! –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —Ö–æ—á–∞ –± 100 —Å–∏–º–≤–æ–ª—ñ–≤.")
        return  # –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º state, –∂–¥–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥

    await update_vacancy("–û–ø–∏—Å", message.from_user.id, message.text)
    await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ! –í–∞—à–∞ –≤–∞–∫–∞–Ω—Å—è –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∞!")

    #analytics
    count = await select_analytics_db("emp_to_publ")
    await update_analytics_db("emp_to_publ", int(count + 1))

    await state.clear()

@router.message(Command("my_vac"))
async def cmd_my_vac_db(message: Message):
    vacancies = await get_posted_vac(message.from_user.id)

    if not vacancies:
        await message.answer("–í–∞–∫–∞–Ω—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    for vacancy in vacancies:
        text = (
            f"<b>{vacancy[1]}</b>\n\n"
            f"<b>üíµ –ó–∞—Ä–æ–±—ñ—Ç–Ω–∞ –ø–ª–∞—Ç–∞:</b>{vacancy[4]}\n\n"
            f"<b>‚öôÔ∏è –ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</b>{vacancy[2]}\n"
            f"<b>üë®‚Äçüíª –•–∞—Ä–∞–∫—Ç–µ—Ä —Ä–æ–±–æ—Ç–∏:</b> {vacancy[5]}\n"
            f"<b>üìÖ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å:</b>{vacancy[6]}\n"
            f"<b>üïê –ì—Ä–∞—Ñ—ñ–∫:</b> –ó {vacancy[7]} –¥–æ {vacancy[8]}\n"
            f"<b>üíº –†—ñ–≤–µ–Ω—å –¥–æ—Å–≤—ñ–¥—É:</b> {vacancy[9]}\n\n"
            f"<b>üìù –û–ø–∏—Å:</b>{vacancy[10]}"
        )
        await message.answer(text, parse_mode="HTML", reply_markup=trash_kb)

@router.callback_query(F.data == 'trash')
async def cmd_del_conf(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—é –≤–∞–∫–∞–Ω—Å—ñ—é?', reply_markup=yes_no_kb)
    await state.set_state(AnswerStates.waiting_for_del)

