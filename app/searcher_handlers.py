from aiogram import Router, Bot, F
from aiogram.filters import CommandStart, BaseFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from app.database import *
from app.keyboards import *
from aiogram.filters.logic import or_f

router = Router()

class AnswerStates(StatesGroup):
    s_waiting_for_cat = State()
    s_waiting_for_cat_another = State()
    s_waiting_for_char = State()
    s_waiting_for_dur = State()
    s_waiting_for_since = State()
    s_waiting_for_till = State()
    s_waiting_for_exp = State()
    s_waiting_for_sal = State()

@router.message(or_f(F.text == "üîé –®—É–∫–∞—Ç–∏ —Ä–æ–±–æ—Ç—É", Command("search")))
async def cmd_collect_name(message: Message, state: FSMContext):
    #analytics
    count = await select_analytics_db("srch_to_filt")
    await update_analytics_db("srch_to_filt", int(count + 1))

    await create_users_db()
    await insert_searcher_id(message.from_user.id, message.from_user.first_name)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=s_cat_kb)
    await state.set_state(AnswerStates.s_waiting_for_cat)

@router.callback_query(F.data.in_({"s_hr", "s_it", "s_fin", "s_bukh"}))
async def cmd_cat(callback: CallbackQuery, state: FSMContext):
    if callback.data == 's_hr':
        await update_filter("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", callback.from_user.id, '–ì–æ—Ç–µ–ª—å–Ω–æ-—Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–∏–π –±—ñ–∑–Ω–µ—Å')
    if callback.data == 's_it':
        await update_filter("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", callback.from_user.id, 'IT')
    if callback.data == 's_fin':
        await update_filter("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", callback.from_user.id, '–§—ñ–Ω–∞–Ω—Å–∏, –±–∞–Ω–∫')
    if callback.data == 's_bukh':
        await update_filter("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", callback.from_user.id, '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä—ñ—è, –∞—É–¥–∏—Ç')
    await callback.message.answer("–Ø–∫–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä —Ä–æ–±–æ—Ç–∏?", reply_markup=s_char_kb)
    await state.set_state(AnswerStates.s_waiting_for_char)

@router.callback_query(F.data == 's_cat_an')
async def cmd_cat_another(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–∞—à –≤–∞—Ä—ñ–∞–Ω—Ç:")
    await state.set_state(AnswerStates.s_waiting_for_cat_another)

@router.message(AnswerStates.s_waiting_for_cat_another)
async def cmd_cat_another_text(message: Message, state: FSMContext):
    await update_filter("–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", message.from_user.id, message.text)
    await message.answer("–Ø–∫–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä —Ä–æ–±–æ—Ç–∏?", reply_markup=s_char_kb)
    await state.set_state(AnswerStates.s_waiting_for_char)

@router.callback_query(F.data.in_({"s_on", "s_of"}))
async def cmd_char(callback: CallbackQuery, state: FSMContext):
    if callback.data == 's_on':
        await update_filter("–•–∞—Ä–∞–∫—Ç–µ—Ä", callback.from_user.id, "–û–Ω–ª–∞–π–Ω")
    if callback.data == 's_of':
        await update_filter("–•–∞—Ä–∞–∫—Ç–µ—Ä", callback.from_user.id, "–û—Ñ–ª–∞–π–Ω")
    await callback.message.answer("–Ø–∫–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ä–æ–±–æ—Ç–∏?", reply_markup=s_dur_kb)
    await state.set_state(AnswerStates.s_waiting_for_dur)

@router.callback_query(F.data.in_({"s_one_time", "s_1-3", "s_3-6", "s_>6"}))
async def cmd_dur(callback: CallbackQuery, state: FSMContext):
    if callback.data == 's_one_time':
        await update_filter("–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å", callback.from_user.id, '–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞/–ø—Ä–æ–µ–∫—Ç–Ω–∞ —Ä–æ–±–æ—Ç–∞')
    if callback.data == 's_1-3':
        await update_filter("–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å", callback.from_user.id, '1-3 –º—ñ—Å—è—Ü—ñ')
    if callback.data == 's_3-6':
        await update_filter("–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å", callback.from_user.id, '3-6 –º—ñ—Å—è—Ü—ñ–≤')
    if callback.data == 's_>6':
        await update_filter("–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å", callback.from_user.id, '>6 –º—ñ—Å—è—Ü—ñ–≤')
    await callback.message.answer("–ó —è–∫–æ—ó –≥–æ–¥–∏–Ω–∏? (–ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ)")
    await state.set_state(AnswerStates.s_waiting_for_since)

@router.message(AnswerStates.s_waiting_for_since)
async def cmd_since(message: Message, state: FSMContext):
    await update_filter("–ó", message.from_user.id, message.text)
    await message.answer("–î–æ —è–∫–æ—ó –≥–æ–¥–∏–Ω–∏? (–ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ)")
    await state.set_state(AnswerStates.s_waiting_for_till)

@router.message(AnswerStates.s_waiting_for_till)
async def cmd_till(message: Message, state: FSMContext):
    await update_filter("–î–æ", message.from_user.id, message.text)
    await message.answer("–†—ñ–≤–µ–Ω—å –¥–æ—Å–≤—ñ–¥—É", reply_markup=s_exp_kb)
    await state.set_state(AnswerStates.s_waiting_for_exp)

@router.callback_query(F.data.in_({"s_no_exp", "s_less_6", "s_more_6", "s_more_1"}))
async def cmd_exp(callback: CallbackQuery, state: FSMContext):
    if callback.data == 's_no_exp':
        await update_filter("–†—ñ–≤–µ–Ω—å", callback.from_user.id, '–ë–µ–∑ –¥–æ—Å–≤—ñ–¥—É')
    if callback.data == 's_less_6':
        await update_filter("–†—ñ–≤–µ–Ω—å", callback.from_user.id, '–º–µ–Ω—à–µ 6 –º—ñ—Å—è—Ü—ñ–≤')
    if callback.data == 's_more_6':
        await update_filter("–†—ñ–≤–µ–Ω—å", callback.from_user.id, '–±—ñ–ª—å—à–µ 6 –º—ñ—Å—è—Ü—ñ–≤')
    if callback.data == 's_more_1':
        await update_filter("–†—ñ–≤–µ–Ω—å", callback.from_user.id, '–±—ñ–ª—å—à–µ 1 —Ä–æ–∫—É')
    await callback.message.answer("–Ø–∫—ñ –≤–∞—à—ñ –∑–∞—Ä–ø–ª–∞—Ç–Ω—ñ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è?", reply_markup=s_sal_kb)
    await state.set_state(AnswerStates.s_waiting_for_sal)

@router.callback_query(F.data.in_({"s_less_10", "s_10-40", "s_more_40"}))
async def cmd_s_sal(callback: CallbackQuery, state: FSMContext):
    if callback.data == 's_less_10':
        await update_filter("–ó–ü", callback.from_user.id, '9999')
    if callback.data == 's_10-40':
        await update_filter("–ó–ü", callback.from_user.id, '39999')
    if callback.data == 's_more_40':
        await update_filter("–ó–ü", callback.from_user.id, '40000')
    await callback.message.answer("–ì–æ—Ç–æ–≤–æ, —Ç–∏ –∫—Ä—É—Ç–∏–π!", reply_markup=search_kb)
    await state.clear()

