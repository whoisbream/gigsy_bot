import aiosqlite
from aiogram import Bot
from config import TOKEN

bot = Bot(token=TOKEN)

# creation of table with users names and ids

async def create_name_db(name: str, telegram_id: int):
    async with aiosqlite.connect("users.db") as db:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É filters, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await db.execute(f"""
            CREATE TABLE IF NOT EXISTS filters (
                name TEXT,
                ID BIGINT,  
                –ö–∞—Ç–µ–≥–æ—Ä—ñ—è TEXT,
                –•–∞—Ä–∞–∫—Ç–µ—Ä —Ä–æ–±–æ—Ç–∏ TEXT,
                –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å TEXT,
                –ó TEXT,
                –î–æ TEXT, 
                –†—ñ–≤–µ–Ω—å –¥–æ—Å–≤—ñ–¥—É TEXT
            )
        """)
        await db.commit()

        query_check_filters = "SELECT 1 FROM filters WHERE ID = ?"

        cursor_filters = await db.execute(query_check_filters, (telegram_id,))
        result_filters = await cursor_filters.fetchone()

        if result_filters is None:
            query_insert = "INSERT INTO filters (name, ID) VALUES (?, ?)"
            await db.execute(query_insert, (name, telegram_id))
            await db.commit()
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} —Å telegram_id {telegram_id} –¥–æ–±–∞–≤–ª–µ–Ω.")
        else:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id {telegram_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

# creation of table with questions and answers
async def create_answers_db(telegram_id):
    table_name = f"answers_{telegram_id}"
    async with aiosqlite.connect("answers.db") as db:
        await db.execute(f"""
            CREATE TABLE IF NOT EXISTS {table_name} (
                questions TEXT,
                answers TEXT
            )
        """)
        await db.commit()

# insert of questions and users answers
async def add_qa(telegram_id, question, answer):
    table_name = f"answers_{telegram_id}"
    async with aiosqlite.connect("answers.db") as db:
        await db.execute(
            f"INSERT INTO {table_name} (questions, answers) VALUES (?, ?)",
            (question, answer,)
        )
        await db.commit()

async def create_vac_db():
    async with aiosqlite.connect("vacancies.db") as db:
        await db.execute(f"""
            CREATE TABLE IF NOT EXISTS vacancies (
                vac_id INTEGER PRIMARY KEY,
                ID BIGINT,
                –ù–∞–∑–≤–∞ TEXT,
                –ö–∞—Ç–µ–≥–æ—Ä—ñ—è TEXT,
                –í–∞–ª—é—Ç–∞ –ó–ü TEXT, 
                –ó–ü INT, 
                –•–∞—Ä–∞–∫—Ç–µ—Ä —Ä–æ–±–æ—Ç–∏ TEXT,
                –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å TEXT,
                –ó TEXT,
                –î–æ TEXT, 
                –†—ñ–≤–µ–Ω—å –¥–æ—Å–≤—ñ–¥—É TEXT,
                –û–ø–∏—Å TEXT
            )
        """)
        await db.commit()

async def create_users_db():
    async with aiosqlite.connect("users.db") as db:
        await db.execute(f"""
            CREATE TABLE IF NOT EXISTS filters (
                name TEXT,
                ID BIGINT, 
                –ö–∞—Ç–µ–≥–æ—Ä—ñ—è TEXT,
                –ó–ü INT, 
                –•–∞—Ä–∞–∫—Ç–µ—Ä —Ä–æ–±–æ—Ç–∏ TEXT,
                –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å TEXT,
                –ó TEXT,
                –î–æ TEXT, 
                –†—ñ–≤–µ–Ω—å –¥–æ—Å–≤—ñ–¥—É TEXT
            )
        """)
        await db.commit()

async def create_analytics_db():
    async with aiosqlite.connect("analytics.db") as db:
        await db.execute(f"""
            CREATE TABLE IF NOT EXISTS user_count (
                emp INT,
                srch INT, 
                emp_to_vac INT,
                srch_to_filt INT,
                emp_to_publ INT, 
                srch_to_fav INT
            )
        """)
        await db.commit()

async def select_analytics_db(column_name: str):
    # –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ column_name –±–µ–∑–æ–ø–∞—Å–µ–Ω (–Ω–µ SQL-–∏–Ω—ä–µ–∫—Ü–∏—è)
    allowed_columns = {"emp", "srch", "emp_to_vac", "srch_to_filt", "emp_to_publ", "srch_to_fav"}  # –ø—Ä–∏–º–µ—Ä –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∏–º—ë–Ω
    if column_name not in allowed_columns:
        raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ —ñ–º'—è —Å—Ç–æ–≤–ø—Ü—è")

    async with aiosqlite.connect("analytics.db") as db:
        query = f"SELECT {column_name} FROM user_count LIMIT 1"
        async with db.execute(query) as cursor:
            row = await cursor.fetchone()

    return row[0] if row else None

async def update_analytics_db(field, value):
    async with aiosqlite.connect("analytics.db") as db:
        await db.execute(
            f"""UPDATE user_count
                SET {field} = ?""",
            (value, )
        )
        await db.commit()

async def insert_id(user_id):
    async with aiosqlite.connect("vacancies.db") as db:
        await db.execute("INSERT INTO vacancies (ID) VALUES (?)", (user_id,))
        await db.commit()

async def insert_searcher_id(user_id, name):
    async with aiosqlite.connect("users.db") as db:
        await db.execute("INSERT INTO filters (ID, name) VALUES (?, ?)", (user_id, name))
        await db.commit()

# Adding of new vacancy to th database. Employer enters "field" that represents column and "value" that represents
# data for cell
async def update_vacancy(field, user_id, value):
    async with aiosqlite.connect("vacancies.db") as db:
        await db.execute(
            f"""UPDATE vacancies 
                SET {field} = ? 
                WHERE ID = ? AND ("–û–ø–∏—Å" IS NULL)""",
            (value, user_id)
        )
        await db.commit()

async def update_filter(field, user_id, value):
    async with aiosqlite.connect("users.db") as db:
        await db.execute(f"UPDATE filters SET {field} = ? WHERE ID = ?", (value, user_id))
        await db.commit()

async def get_user_filters(user_id):
    # –°—Ç–æ–ª–±—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏–∑–≤–ª–µ—á—å
    columns = ["–ö–∞—Ç–µ–≥–æ—Ä—ñ—è", "–•–∞—Ä–∞–∫—Ç–µ—Ä —Ä–æ–±–æ—Ç–∏", "–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ä–æ–±–æ—Ç–∏", "–ó", "–î–æ", "–†—ñ–≤–µ–Ω—å –¥–æ—Å–≤—ñ–¥—É"]

    async with aiosqlite.connect("users.db") as db:
        async with db.execute(f"SELECT {', '.join(columns)} FROM filters WHERE ID = ?", (user_id,)) as cursor:
            row = await cursor.fetchone()  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ user_id —É–Ω–∏–∫–∞–ª–µ–Ω)

            if row:
                return dict(zip(columns, row))  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å {–Ω–∞–∑–≤–∞–Ω–∏–µ_—Å—Ç–æ–ª–±—Ü–∞: –∑–Ω–∞—á–µ–Ω–∏–µ}

    return None  # –ï—Å–ª–∏ user_id –Ω–µ –Ω–∞–π–¥–µ–Ω

async def rec_alg(viewed, telegram_id):

    filters = await get_user_filters(telegram_id)
    score = 0
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É recommendations_{telegram_id}"""

    table_name = f"recommendations_{telegram_id}"

    print(f"üîÑ [match_vacancies] –ó–∞–ø—É—â–µ–Ω –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è {telegram_id} —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏: {filters}")

    async with aiosqlite.connect("users.db") as user_db, aiosqlite.connect("vacancies.db") as vac_db:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π (–µ—Å–ª–∏ –µ–µ –Ω–µ—Ç)
        await user_db.execute(f"""
            CREATE TABLE IF NOT EXISTS {table_name} (
                viewed INTEGER,
                score INTEGER,
                –ù–∞–∑–≤–∞ TEXT,
                –ö–∞—Ç–µ–≥–æ—Ä—ñ—è TEXT,
                –ó–ü INT,
                –•–∞—Ä–∞–∫—Ç–µ—Ä —Ä–æ–±–æ—Ç–∏ TEXT,
                –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ä–æ–±–æ—Ç–∏ TEXT,
                –ó TEXT,
                –î–æ TEXT,
                –†—ñ–≤–µ–Ω—å –¥–æ—Å–≤—ñ–¥—É TEXT,
                –û–ø–∏—Å TEXT
            )
        """)
        await user_db.commit()
        print(f"‚úÖ [match_vacancies] –¢–∞–±–ª–∏—Ü–∞ {table_name} —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

        vac_db.row_factory = aiosqlite.Row  # –î–µ–ª–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–ª–æ–Ω–æ–∫
        async with vac_db.execute("SELECT * FROM vacancies") as cursor:
            async for row in cursor:
                row_dict = dict(row)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ª–æ–≤–∞—Ä—å
                if row_dict.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è') == filters.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è'):  # –ó–∞—â–∏—Ç–∞ –æ—Ç KeyError
                    score += 1
                    zp_value = row_dict.get('–ó–ü')
                    salary = None
                    if isinstance(zp_value, (int, float)):  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
                        if zp_value < 10000:
                            salary = 9999
                        elif 10000 <= zp_value < 40000:
                            salary = 39999
                        elif zp_value >= 40000:
                            salary = 40000
                    if salary == filters.get('–ó–ü'):
                        score += 1
                    if row_dict.get('–•–∞—Ä–∞–∫—Ç–µ—Ä') == filters.get('–•–∞—Ä–∞–∫—Ç–µ—Ä —Ä–æ–±–æ—Ç–∏'):
                        score += 1
                    if row_dict.get('–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å') == filters.get('–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ä–æ–±–æ—Ç–∏'):
                        score += 1
                    if row_dict.get('–ó') == filters.get('–ó'):
                        score += 1
                    if row_dict.get('–î–æ') == filters.get('–î–æ'):
                        score += 1
                    if row_dict.get('–†—ñ–≤–µ–Ω—å') == filters.get('–†—ñ–≤–µ–Ω—å –¥–æ—Å–≤—ñ–¥—É'):
                        score += 1
                    if score >= 2:
                        table_name = f"recommendations_{telegram_id}"
                        await user_db.execute(f"""INSERT INTO {table_name} (viewed, score, –ù–∞–∑–≤–∞, –ö–∞—Ç–µ–≥–æ—Ä—ñ—è, –ó–ü, –•–∞—Ä–∞–∫—Ç–µ—Ä, –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å, –ó, –î–æ, –†—ñ–≤–µ–Ω—å, –û–ø–∏—Å) 
                                              VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
                                              (viewed, score, row_dict.get('–ù–∞–∑–≤–∞'), row_dict.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è'),
                                               row_dict.get('–ó–ü'), row_dict.get('–•–∞—Ä–∞–∫—Ç–µ—Ä'), row_dict.get('–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å'),
                                               row_dict.get('–ó'), row_dict.get('–î–æ'), row_dict.get('–†—ñ–≤–µ–Ω—å'),
                                               row_dict.get('–û–ø–∏—Å')))
                        await user_db.commit()

                    score = 0

async def send_rec(telegram_id):
    table_name = f"recommendations_{telegram_id}"
    async with aiosqlite.connect("users.db") as db:
        db.row_factory = aiosqlite.Row  # –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Å—Ç—Ä–æ–∫–∞–º –∫–∞–∫ –∫ —Å–ª–æ–≤–∞—Ä—è–º

        for score in range(6, 1, -1):  # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º score –æ—Ç 6 –¥–æ 2
            async with db.execute(f"SELECT * FROM {table_name} WHERE score = ? AND viewed = 0", (score,)) as cursor:
                row = await cursor.fetchone()  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω—ã–º score
                if row:
                    row_dict = dict(row)
                    # await db.execute(f"DELETE FROM {table_name} WHERE –û–ø–∏—Å = ?", (row_dict['–û–ø–∏—Å'],))
                    # await db.commit()  # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    await db.execute(f"UPDATE {table_name} SET viewed = 1 WHERE –û–ø–∏—Å = ?", (row_dict['–û–ø–∏—Å'],))
                    await db.commit()  # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    return row_dict  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É, –∑–∞—Ç–µ–º –≤—ã–∑—ã–≤–∞–µ–º —Å–Ω–æ–≤–∞

                # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç —Å—Ç—Ä–æ–∫ —Å viewed = 0, –æ—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        async with db.execute(f"SELECT COUNT(*) FROM {table_name} WHERE viewed = 0") as cursor:
            count = await cursor.fetchone()
            if count[0] == 0:
                await db.execute(f"DELETE FROM {table_name}")  # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                await db.commit()

        return None  # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π –±–æ–ª—å—à–µ –Ω–µ—Ç

async def find_desc(telegram_id, short_description):
    async with aiosqlite.connect("vacancies.db") as db:
        db.row_factory = aiosqlite.Row

        # –ò—â–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏–µ short_description –≤ —Å—Ç–æ–ª–±—Ü–µ –û–ø–∏—Å
        async with db.execute(f"SELECT * FROM vacancies WHERE –û–ø–∏—Å LIKE ?", (f"%{short_description}%",)) as cursor:
            row = await cursor.fetchone()
            if row:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ row –Ω–µ None
                return dict(row)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ª–æ–≤–∞—Ä—å

    return None  # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None

async def add_to_fav(telegram_id, row_dict: dict):
    async with aiosqlite.connect("users.db") as db:
        table_name = f"favorite_{telegram_id}"
        await db.execute(f"""
                    CREATE TABLE IF NOT EXISTS {table_name} (
                        viewed INTEGER,
                        –ù–∞–∑–≤–∞ TEXT,
                        –ö–∞—Ç–µ–≥–æ—Ä—ñ—è TEXT,
                        –•–∞—Ä–∞–∫—Ç–µ—Ä —Ä–æ–±–æ—Ç–∏ TEXT,
                        –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ä–æ–±–æ—Ç–∏ TEXT,
                        –ó TEXT,
                        –î–æ TEXT,
                        –†—ñ–≤–µ–Ω—å –¥–æ—Å–≤—ñ–¥—É TEXT,
                        –û–ø–∏—Å TEXT
                    )
                """)
        await db.commit()

        viewed = 0

        await db.execute(f"""INSERT INTO {table_name} (viewed, –ù–∞–∑–≤–∞, –ö–∞—Ç–µ–≥–æ—Ä—ñ—è, –•–∞—Ä–∞–∫—Ç–µ—Ä, –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å, –ó, –î–æ, –†—ñ–≤–µ–Ω—å, –û–ø–∏—Å) 
                                                      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)""",
                              (viewed, row_dict.get('–ù–∞–∑–≤–∞'), row_dict.get('–ö–∞—Ç–µ–≥–æ—Ä—ñ—è'),
                               row_dict.get('–•–∞—Ä–∞–∫—Ç–µ—Ä'), row_dict.get('–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å'),
                               row_dict.get('–ó'), row_dict.get('–î–æ'), row_dict.get('–†—ñ–≤–µ–Ω—å'),
                               row_dict.get('–û–ø–∏—Å')))
        await db.commit()

async def send_fav(telegram_id):
    async with aiosqlite.connect("users.db") as db:
        db.row_factory = aiosqlite.Row
        table_name = f"favorite_{telegram_id}"
        async with db.execute(f"SELECT * FROM {table_name} WHERE viewed = 0") as cursor:
            row = await cursor.fetchone()  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ—á–∫—É —Å –≤—å—é–¥ = 0
            if row:
                row_dict = dict(row)
                await db.execute(f"UPDATE {table_name} SET viewed = 1 WHERE –û–ø–∏—Å = ?", (row_dict['–û–ø–∏—Å'],))
                await db.commit()  # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                return row_dict  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É, –∑–∞—Ç–µ–º –≤—ã–∑—ã–≤–∞–µ–º —Å–Ω–æ–≤–∞

async def reset_viewed(telegram_id: int):
    async with aiosqlite.connect("users.db") as db:
        table_name = f"favorite_{telegram_id}"
        await db.execute(f"UPDATE {table_name} SET viewed = 0")
        await db.commit()

async def get_posted_vac(telegram_id):
    async with aiosqlite.connect("vacancies.db") as db:
        cursor = await db.execute("SELECT * FROM vacancies WHERE ID = ?", (telegram_id,))
        rows = await cursor.fetchall()
        await cursor.close()
        return rows

